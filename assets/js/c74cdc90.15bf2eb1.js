"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7568],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,k=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(k,c(c({ref:t},u),{},{components:r})):n.createElement(k,c({ref:t},u))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:o,c[1]=l;for(var s=2;s<a;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3330:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:1},c="Install and run",l={unversionedId:"quick-start/install-run",id:"quick-start/install-run",title:"Install and run",description:"Choose your favorite way to install Mockaco locally or in your server.",source:"@site/docs/quick-start/install-run.md",sourceDirName:"quick-start",slug:"/quick-start/install-run",permalink:"/Mockaco/docs/quick-start/install-run",draft:!1,editUrl:"https://github.com/natenho/Mockaco/tree/master/website/docs/quick-start/install-run.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/Mockaco/docs/category/quick-start"},next:{title:"Create a mock",permalink:"/Mockaco/docs/quick-start/create-mock"}},i={},s=[{value:".NET CLI",id:"net-cli",level:2},{value:"Docker",id:"docker",level:2},{value:"From sources",id:"from-sources",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"install-and-run"},"Install and run"),(0,o.kt)("p",null,"Choose your favorite way to install Mockaco locally or in your server."),(0,o.kt)("h2",{id:"net-cli"},".NET CLI"),(0,o.kt)("p",null,"Install and run as a dotnet tool:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'$ dotnet tool install -g mockaco\n$ mockaco --urls "http://localhost:5000"\n')),(0,o.kt)("p",null,"A random local port is chosen if ",(0,o.kt)("inlineCode",{parentName:"p"},"--urls")," parameter is not provided."),(0,o.kt)("h2",{id:"docker"},"Docker"),(0,o.kt)("p",null,"You can run Mockaco from the official ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/natenho/mockaco"},"Docker image")," (replace ",(0,o.kt)("inlineCode",{parentName:"p"},"/your/folder")," with an existing directory of your preference):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -it --rm -p 5000:5000 -v /your/folder:/app/Mocks natenho/mockaco\n")),(0,o.kt)("p",null,"The port exposed by the container is 5000 (HTTP) by default."),(0,o.kt)("h2",{id:"from-sources"},"From sources"),(0,o.kt)("p",null,"Or your can run it directly from sources:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ git clone https://github.com/natenho/Mockaco.git\n$ cd Mockaco\\src\\Mockaco\n$ dotnet run\n")),(0,o.kt)("p",null,"A random local port is chosen if ",(0,o.kt)("inlineCode",{parentName:"p"},"--urls")," parameter is not provided."))}d.isMDXComponent=!0}}]);