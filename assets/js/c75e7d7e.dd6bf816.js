"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2688],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={},a="Request",c={unversionedId:"reference-scripting/request",id:"reference-scripting/request",title:"Request",description:"The Request object has the following properties:",source:"@site/docs/reference-scripting/request.md",sourceDirName:"reference-scripting",slug:"/reference-scripting/request",permalink:"/Mockaco/docs/reference-scripting/request",draft:!1,editUrl:"https://github.com/natenho/Mockaco/tree/master/website/docs/reference-scripting/request.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Global",permalink:"/Mockaco/docs/reference-scripting/global"},next:{title:"Response",permalink:"/Mockaco/docs/reference-scripting/response"}},s={},l=[{value:"Url",id:"url",level:2},{value:"Route",id:"route",level:2},{value:"Header",id:"header",level:2},{value:"Query",id:"query",level:2},{value:"Body",id:"body",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"request"},"Request"),(0,o.kt)("p",null,"The Request object has the following properties:"),(0,o.kt)("h2",{id:"url"},"Url"),(0,o.kt)("p",null,"An instance of ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/dotnet/api/system.uri"},(0,o.kt)("inlineCode",{parentName:"a"},"Uri"))," class containing request URL data."),(0,o.kt)("h2",{id:"route"},"Route"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlydictionary-2"},(0,o.kt)("inlineCode",{parentName:"a"},"IReadOnlyDictionary<string, string>"))," containing route parameters. Missing keys will return an empty string. To check the existence of a key, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ContainsKey")," method."),(0,o.kt)("h2",{id:"header"},"Header"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlydictionary-2"},(0,o.kt)("inlineCode",{parentName:"a"},"IReadOnlyDictionary<string, string>"))," containing request headers. Missing keys will return an empty string. To check the existence of a key, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ContainsKey")," method."),(0,o.kt)("h2",{id:"query"},"Query"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlydictionary-2"},(0,o.kt)("inlineCode",{parentName:"a"},"IReadOnlyDictionary<string, string>"))," containing query parameters. Missing keys will return an empty string. To check the existence of a key, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ContainsKey")," method."),(0,o.kt)("h2",{id:"body"},"Body"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"https://www.newtonsoft.com/json/help/html/t_newtonsoft_json_linq_jtoken.htm"},(0,o.kt)("inlineCode",{parentName:"a"},"JToken"))," object containing request body data. The content of the request body is parsed as JSON and returned as a ",(0,o.kt)("inlineCode",{parentName:"p"},"JToken")," object. The content types that Mockaco can parse are ",(0,o.kt)("inlineCode",{parentName:"p"},"application/json"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"application/xml"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"text/xml"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"text/plain"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),"."))}d.isMDXComponent=!0}}]);